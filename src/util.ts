
export function GetLinkProperty(link: any, prop: any) {
	return link && link.properties && link.properties[prop];
}

export function GetNodeProp(node: any, prop: string, currentGraph?: any) {
	return node && node.properties && node.properties[prop];
}

export function GetNodeTitle(node: any) {
	if (!node) {
		return 'Unknown';
	}
	return node.properties ? node.properties.text || node.id : node.id;
}

export const LinkPropertyKeys = {
	TYPE: 'type',
	CONSTRAINTS: 'constraints',
	VALID_CONSTRAINTS: 'valid-constraints',
	BeforeCall: 'BeforeCall',
	FUNCTION_ID: 'function-id',
	InstanceUpdate: 'InstanceUpdate',
	ComponentTag: 'ComponentTag',
	Sibling: 'sibling',
	Parameters: 'parameters',
	Model: 'model',
	ViewModelKey: 'viewModelKey',
	ModelKey: 'modelKey',
	ComponentStyle: 'ComponentStyle',
	MethodProps: 'methodProps',
	MountingProps: 'mountingProps',
	ScreenEffectApiProps: 'screenEffectApiProps',
	DashboardScreenEffectApiProps: 'dashboardScreenEffectApiProps',
	RoutingProps: 'routingProps',
	EffectProps: 'effectProps',
	ComponentProperty: 'ComponentProperty',
	ViewType: 'viewType',
	DashboardAccessProps: 'dashboardAccessProps',
	DashboardViewMountProps: 'dashboardViewMountProps',
	DashboardRoutingProps: 'dashboardRoutingProps',
	DashboardEffectProps: 'dashboardEffectProps',
	AgentAccess: 'AgentAccess',
	RoutingDescriptionId: 'RoutingDescriptionId',
	Enumeration: 'Enumeration',
	AsForm: 'AsForm',
	DefaultValue: 'DefaultValue'
};

export const NodeProperties = {
	ViewPackage: 'view-package',
	IsFetchOutput: 'IsFetchOutput',
	UIActionMethod: 'UIActionMethod',
	HideStyle: 'HideStyle',
	IsPropertyCentric: 'IsPropertyCentric',
	RouteInjection: 'RouteInjection',
	PropertyCentricType: 'PropertyCentricType',
	PropertyBeingUsed: 'PropertyBeingUsed',
	IsFetchParameter: 'IsFetchParameter',
	OriginalConfig: 'OriginalConfig',
	ViewModelKey: 'ViewModelKey',
	DataChainPurpose: 'DataChainPurpose',
	UserOfAgent: 'UserOfAgent',
	StateKey: 'StateKey',
	AutoCalculate: 'AutoCalculate',
	DefaultPropertyValueType: 'DefaultPropertyValueType',
	DefaultPropertyValue: 'DefaultPropertyValue',
	SwaggerNode: 'SwaggerNode',
	SwaggerClassName: 'SwaggerClassName',
	GridPlacement: 'GridPlacement',
	CompleteFunction: 'CompleteFunction',
	ArbiterModels: 'ArbiterModels',
	IsFetchDataChainStorage: 'IsFetchDataChainStorage',
	IsDashboard: 'IsDashboard',
	GridRowCount: 'GridRowCount',
	MergeNode: 'MergeNode',
	DataChainTypeName: 'DataChainTypeName',
	DataChainSourceFile: 'DataChainSourceFile',
	DataChainTypeCategory: 'DataChainTypeCategory',
	IsHomeLaunchView: 'IsHomeLaunchView',
	UseDefaultValue: 'UseDefaultValue',
	DefaultValue: 'DefaultValue',
	HoverStyle: ':hover',
	IsRoot: 'composition-isRoot',
	AfterEffectMethodChain: 'AfterEffectMethodChain',
	IsHomeView: 'IsHomeView',
	AsLocalContext: 'AsLocalContext',
	GeneratedConcept: 'GeneratedConcept',
	DataChainName: 'DataChainName',
	ActiveStyle: ':active',
	Themes: 'Themes',
	IsCompositionLeaf: 'IsCompositionLeaf',
	SharedReferenceCollection: 'SharedReferenceCollection',
	BeforeStyle: '::before',
	ValidationConfigurationItem: 'ValidationConfigurationItem',
	AfterEffectKey: 'AfterEffectKey',
	GridAreas: 'GridAreas',
	AfterStyle: '::after',
	LastViewPackage: 'LastViewPackage',
	MediaQuery: 'MediaQuery',
	UseMediaQuery: 'UseMediaQuery',
	UseValue: 'UseValue',
	CheckedStyle: ':checked',
	DisabledStyle: ':disabled',
	EmptyStyle: ':empty',
	EnabledStyle: ':enabled',
	FirstChildStyle: ':first-child',
	LastChildStyle: ':last-child',
	FocusStyle: ':focus',
	ReadOnlyStyle: ':read-only',
	DefaultComponentApiValue: 'DefaultComponentApiValue',
	ExcludeFromGeneration: 'ExcludeFromGeneration',
	ViewPackageTitle: 'view-package-title',
	ComponentApi: 'component-api',
	DefaultViewModel: 'DefaultViewModel',
	SelectorType: 'selector-type',
	UseInstanceType: 'UseInstanceType',
	SharedComponent: 'SharedComponent',
	EventType: 'EventType',
	EnabledMenu: 'EnabledMenu',
	InstanceType: 'InstanceType',
	ComponentParameters: 'ComponentParameters',
	NavigationParameters: 'NavigationParameters',
	UseNavigationParams: 'UseNavigationParams',
	ClientMethod: 'ClientMethod',
	MethodParameters: 'MethodParameters',
	NavigationParametersProperty: 'NavigationParametersProperty',
	ExecuteButton: 'ExecuteButton',
	MethodParameterProperty: 'MethodParameterProperty',
	ScreenParameters: 'ScreenParameters',
	Method: 'Method',
	SelectedLayoutCell: 'SelectedLayoutCell',
	ChainParent: 'ChainParent',
	Navigation: 'Navigation',
	ValidationMethodTarget: 'ValidationMethodTarget',
	ClientMethodParameters: 'ClientMethodParameters',
	DashboardViewComponent: 'DashboardViewComponent',
	AsOutput: 'AsOutput',
	UIAgnostic: 'UIAgnostic',
	EntryPoint: 'EntryPoint',
	CSEntryPoint: 'CSEntryPoint',
	CS: 'CS',
	IsUserOfAgentType: 'IsUserOfAgentType',
	UpdateAgentPostRegistrationMethod: 'UpdateAgentPostRegistrationMethod',
	Property: 'Property',
	DataChainEntry: 'DataChainEntry',
	MergeChain: 'MergeChain',
	ComponentProperties: 'ComponentProperties',
	Layout: 'Layout',
	Domain: 'Domain',
	Priority: 'Priority',
	DataChain: 'DataChain',
	OnBlur: 'onBlur',
	Selector: 'Selector',
	ScreenOption: 'ScreenOption',
	SelectorProperty: 'SelectorProperty',
	Value: 'Value',
	ContextParams: 'ContextParams',
	value: 'value',
	Number: 'Number',
	OnFocus: 'onFocus',
	OnChange: 'onChangeText',
	SharedMenuCollection: 'SharedMenuCollection',
	UIType: 'UIType',
	DashboardButtons: 'DashboardButtons',
	TextType: 'TextType',
	Enumeration: 'Enumeration',
	ConditionType: 'ConditionType',
	MatchReference: 'MatchReference',
	MatchManyReferenceParameter: 'MatchManyReferenceParameter',
	EnumerationReference: 'EnumerationReference',
	AllowedExtensionValues: 'AllowedExtensionValues',
	ServiceType: 'ServiceType',
	DisallowedExtensionValues: 'DisallowedExtensionValues',
	AllowedEnumValues: 'AllowedEnumerationValue',
	DisallowedEnumValues: 'DisallowedEnumValues',
	Condition: 'Condition',
	ServiceTypeSettings: 'ServiceTypeSettings',
	ValidatorModel: 'ValidatorModel',
	ExecutorAgent: 'ExecutorAgent',
	ExecutorFunction: 'ExecutorFunction',
	ExecutorModel: 'ExecutorModel',
	ExecutorModelOutput: 'ExecutorModelOutput',
	ExecutorFunctionType: 'ExecutorFunctionType',
	ValidatorFunction: 'ValidatorFunction',
	UseEnumeration: 'UseEnumeration',
	NameSpace: 'namespace',
	FilterModel: 'filtermodel',
	FilterAgent: 'filteragent',
	Validator: 'Validator',
	ModelItemFilter: 'ModelItemFilter',
	Executor: 'Executor',
	ValidatorAgent: 'ValidatorAgent',
	Collapsed: 'collapsed',
	UseExtension: 'usextension',
	IncludedInList: 'includedInList',
	IsShared: 'IsShared',
	Pinned: 'Pinned',
	UseInView: 'UseInView',
	Selected: 'Selected',
	ExcludedFromList: 'excludedInList',
	IgnoreInView: 'IgnoreInView',
	UseEqual: 'UseEqual',
	IsEqualTo: 'IsEqualTo',
	CodeUser: 'codeUser',
	HttpRoute: 'HttpRoute',
	HttpMethod: 'HttpMethod',
	ExcludeFromController: 'ExcludeFromController',
	IsAgent: 'isAgent',
	CancelButton: 'CancelButton',
	IsCompositeInput: 'IsCompositeInput',
	IsParent: 'isParent', //This is a program setting. Just for allowing us to hide and show the model picker.
	IsUser: 'IsUser', //User is the object directly associated with a IdentityProvider.
	IsOwnedByAgents: 'IsOwnedByAgents',
	UIUser: 'uiUser',
	IsSharedResource: 'isSharedResource', // Not sure if this helps anything.
	UIPermissions: 'uiPermissions',
	IsOwned: 'isOwned',
	UIName: 'uiName', // The name used in the ui.
	QueryParameterObjectExtendible: 'QueryParameterObjectExtendible',
	QueryParameterObject: 'QueryParameterObject',
	QueryParameterParam: 'QueryParameterParam',
	DefaultAgent: 'DefaultAgent',
	QueryParameterParamType: 'QueryParameterParamType',
	TemplateParameter: 'TemplateParameter',
	TemplateParameterType: 'TemplateParameterType',
	IsQuery: 'query',
	AutoDelete: 'AutoDelete', // Anything matching the properties etc, will auto delete along with the current node.
	UriBody: 'UriBody',
	UriParameter: 'UriParameter',
	NodePackage: 'NodePackage',
	NodePackageType: 'NodePackageType',
	NodePackageAgent: 'NodePackageAgent',
	IsPagingModel: 'IsPagingModel',
	PagingSkip: 'Skip',
	IsPaging: 'IsPaging',
	PagingTake: 'Take',
	PagingFilter: 'Filter',
	PagingSort: 'PagingSort',
	IsViewModel: 'IsViewModel',
	// ComponentApiKey: 'ComponentApiKey',
	IsDataChainPagingSkip: 'IsDataChainPagingSkip',
	BooleanType: 'composition-boolean',
	IsDataChainPagingTake: 'IsDataChainPagingTake',
	UIText: 'text',
	Target: 'Target',
	SwaggerPath: 'SwaggerPath',
	UseAsValue: 'UseAsValue',
	IsUrlParameter: 'IsUrlParameter',
	PermissionSummary: 'PermissionSummary',
	ValidationSummary: 'ValidationSummary',
	ExecutionSummary: 'ExecutionSummary',
	NavigationAction: 'NavigationAction',
	AgentBasedMethod: 'AgentBasedMethod',
	ViewType: 'view-type',

	IsReferenceList: 'isReferenceList',
	UseHttps: 'UseHttps',
	Description: 'description',
	IsSwagger: 'IsSwagger',
	SwaggerMethodDefinition: 'SwaggerMethodDefinition',
	SwaggerEndpoint: 'SwaggerEndpoint',
	UISingular: 'uiSingular',
	UIChoice: 'uiChoice',
	UIChoiceType: 'uiChoiceType',
	UIChoiceNode: 'uiChoiceNode', //A node that the "parameter" node points to.
	PermissionRequester: 'permissions-requester', // The agent that is requesting permission to do something
	PermissionManyToMany: 'permissions-many-to-many',
	MatchIds: 'matchs-ids',
	ConnectionExists: 'connection-exists',
	PermissionTarget: 'permissions-target',
	// Property has a dependent property
	UIDependsOn: 'uiDependsOn',
	UseUIDependsOn: 'UseuiDependsOn',
	UseUIOptions: 'UseuiOptions',
	UIOptionType: 'uiOptionType',

	//Use a custom option
	UseCustomUIOption: 'useCustomUIOption',
	UIOptionTypeCustom: 'uiOptionTypeCustom',
	//An option
	UIOption: 'uiOption',
	//Use Extensions
	UseUIExtensionList: 'UseuiExtensionList',
	UIExtensionList: 'uiExtensionList',
	UIExtension: 'uiExtension',
	UIExtensionDefinition: 'uiExtensionDefinition',
	Label: 'Label',
	Error: 'Error',
	Placeholder: 'Placeholder',
	Options: 'Options',
	Success: 'Success',
	Style: 'Style',
	MethodProps: 'methodProperties',
	FilterPropreties: 'filterproperties',
	UIValidationType: 'uiValidationType',
	UseUIValidations: 'UseuiValidations',
	NODEType: 'nodeType',
	DefaultViewTypeGet: 'DefaultViewTypeGet',
	DefaultViewTypeGetAll: 'DefaultViewTypeGetAll',
	DefaultViewTypeUpdate: 'DefaultViewTypeUpdate',
	DefaultViewTypeDelete: 'DefaultViewTypeDelete',
	DefaultViewTypeCreate: 'DefaultViewTypeCreate',
	ComponentType: 'component-type',
	UsingSharedComponent: 'UsingSharedComponent',
	ReferenceType: 'referenceType', //Reference nodes will have this type.

	ComponentDidMountEvent: 'component-did-mount',
	UIAttributeType: 'uiAttributeType',
	PermissionValueType: 'PermissionValueType',
	UseModelAsType: 'useModelAsType',

	IsDefaultProperty: 'isDefaultProperty',
	ExecuteComponent: 'ExecuteComponent',

	HasLogicalChildren: 'hasLogicalChildren',
	LogicalChildrenTypes: 'logicalChildrenTypes',
	HasLogicalNieces: 'hasLogicalNieces',
	LogicalNieceTypes: 'logicalNieceTypes',
	ValidationPropertyName: 'ValidationPropertyName',
	IsPluralComponent: 'IsPluralComponent',
	DataGenerationType: 'data-generation-type',

	ManyToManyNexus: 'manyToManyNexux',
	ManyToManyNexusType: 'manyToManyNexusType',
	ManyToManyNexusTypes: 'manyToManyNexusTypes',

	MethodType: 'MethodType',
	ChainNodeInput2: 'ChainNodeInput2',
	ScreenInstance: 'ScreenInstance',
	Model: 'Model',
	NavigationScreen: 'NavigationScreen',
	Agent: 'Agent',
	Screen: 'Screen',
	ChainNodeInput1: 'ChainNodeInput1',
	List: 'List',
	UIModelType: 'uiModelType',
	IsTypeList: 'IsTypeList',
	DataChainReferences: 'DataChainReferences',
	Lambda: 'Lambda',
	LambdaInsertArguments: 'LambdaInsertArguments',
	RouteSource: 'RouteSource',
	ParameterName: 'ParameterName',
	EventArgumentType: 'EventArgumentType',
	TargetProperty: 'TargetProperty',
	ModelKey: 'ModelKey',
	DataChainReference: 'DataChainReference',
	NumberParameter: 'NumberParameter',

	UseScopeGraph: 'UseScopeGraph',
	ScopeGraph: 'scopedGraph',

	DataChainFunctionType: 'DataChainFunctionType',
	DataChainNameSpace: 'DataChainNameSpace',
	DataChainProperty: 'DataChainProperty',
	QueryParameterType: 'QueryParameterType',
	Component: 'Component',

	AfterMethod: 'after-method',
	AfterMethodSetup: 'after-method-setup',

	//The name used for code.
	Groups: 'groups',
	GroupParent: 'groupParent',
	CodeName: 'codeName',
	CssName: 'cssName',
	ValueName: 'valueName', //The name of the instance variable to be used
	AgentName: 'agentName', //The name of the instance variable to be used
	CodePropertyType: 'codeProperty',
	FunctionType: 'functionType',
	MethodFunctionValidation: 'method-function-validation',
	NotIncludedInController: 'not-included-in-controller',
	PermissionImpl: 'permission-implementation',
	NoApiPrefix: 'no-api-prefix',
	AsForm: 'as-form',
	CollectCookies: 'collect-cookies',
	AsText: 'as-text',
	ClassConstructionInformation: 'ClassConstructionInformation',
	DataChainCollection: 'DataChainCollection'
};
export interface Node {
	properties: any;
	propertyVersions?: { [index: string]: any };
	id: string;
	dirty: any;
}


export function groupBy(xs: any[], key: Function) {
	return xs.reduce(function(rv, x) {
		(rv[key(x)] = rv[key(x)] || []).push(x);
		return rv;
	}, {});
}